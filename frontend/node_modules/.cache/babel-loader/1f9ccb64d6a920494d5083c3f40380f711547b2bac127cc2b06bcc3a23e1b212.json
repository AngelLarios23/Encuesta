{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Documents\\\\4 cuatrimestre\\\\Aplicacion web\\\\ProyectoEncuetas\\\\Encuesta4.1\\\\Encuesta\\\\frontend\\\\src\\\\Charts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nexport function Chart() {\n  _s();\n  const [numberAnswers, setNumberAnswers] = useState([0, 0, 0, 0]); // Valores iniciales\n\n  useEffect(() => {\n    getData();\n  }, []);\n  const getData = async () => {\n    try {\n      Swal.fire(\"Cargando datos\");\n      Swal.showLoading();\n      const {\n        data\n      } = await axios.get(\"http://localhost:4000/get-answers-to-chart\");\n      setNumberAnswers(data); // Asegúrate de que `data` sea un array con los valores correctos\n      Swal.close();\n    } catch (error) {\n      Swal.fire(\"Ocurrió un error\", error.message || \"Error desconocido\", \"error\");\n    }\n  };\n  const data = {\n    labels: [\"Excelente\", \"Bueno\", \"Neutro\", \"Malo\"],\n    datasets: [{\n      label: '# de respuestas',\n      data: numberAnswers,\n      // Usa los datos dinámicos obtenidos del servidor\n      backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n      borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'],\n      borderWidth: 2\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Doughnut, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n}\n_s(Chart, \"0GdXXk6ULJyTrwBklxzoSSuxFzI=\");\n_c = Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","ArcElement","Tooltip","Legend","Doughnut","axios","Swal","jsxDEV","_jsxDEV","register","_s","numberAnswers","setNumberAnswers","getData","fire","showLoading","data","get","close","error","message","labels","datasets","label","backgroundColor","borderColor","borderWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PC/Documents/4 cuatrimestre/Aplicacion web/ProyectoEncuetas/Encuesta4.1/Encuesta/frontend/src/Charts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nexport function Chart() {\r\n  const [numberAnswers, setNumberAnswers] = useState([0, 0, 0, 0]); // Valores iniciales\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      Swal.fire(\"Cargando datos\");\r\n      Swal.showLoading();\r\n      const { data } = await axios.get(\"http://localhost:4000/get-answers-to-chart\");\r\n      setNumberAnswers(data); // Asegúrate de que `data` sea un array con los valores correctos\r\n      Swal.close();\r\n    } catch (error) {\r\n      Swal.fire(\"Ocurrió un error\", error.message || \"Error desconocido\", \"error\");\r\n    }\r\n  };\r\n\r\n  const data = {\r\n    labels: [\"Excelente\", \"Bueno\", \"Neutro\", \"Malo\"],\r\n    datasets: [\r\n      {\r\n        label: '# de respuestas',\r\n        data: numberAnswers, // Usa los datos dinámicos obtenidos del servidor\r\n        backgroundColor: [\r\n          'rgba(255, 99, 132, 0.2)',\r\n          'rgba(54, 162, 235, 0.2)',\r\n          'rgba(255, 206, 86, 0.2)',\r\n          'rgba(75, 192, 192, 0.2)',\r\n        ],\r\n        borderColor: [\r\n          'rgba(255, 99, 132, 1)',\r\n          'rgba(54, 162, 235, 1)',\r\n          'rgba(255, 206, 86, 1)',\r\n          'rgba(75, 192, 192, 1)',\r\n        ],\r\n        borderWidth: 2,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return <Doughnut data={data} />;\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,KAAK,IAAIC,OAAO,EAAEC,UAAU,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AACxE,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/BR,OAAO,CAACS,QAAQ,CAACR,UAAU,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAE7C,OAAO,SAASJ,KAAKA,CAAA,EAAG;EAAAW,EAAA;EACtB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;EAElEC,SAAS,CAAC,MAAM;IACde,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACFP,IAAI,CAACQ,IAAI,CAAC,gBAAgB,CAAC;MAC3BR,IAAI,CAACS,WAAW,CAAC,CAAC;MAClB,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,4CAA4C,CAAC;MAC9EL,gBAAgB,CAACI,IAAI,CAAC,CAAC,CAAC;MACxBV,IAAI,CAACY,KAAK,CAAC,CAAC;IACd,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdb,IAAI,CAACQ,IAAI,CAAC,kBAAkB,EAAEK,KAAK,CAACC,OAAO,IAAI,mBAAmB,EAAE,OAAO,CAAC;IAC9E;EACF,CAAC;EAED,MAAMJ,IAAI,GAAG;IACXK,MAAM,EAAE,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;IAChDC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,iBAAiB;MACxBP,IAAI,EAAEL,aAAa;MAAE;MACrBa,eAAe,EAAE,CACf,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,CAC1B;MACDC,WAAW,EAAE,CACX,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,CACxB;MACDC,WAAW,EAAE;IACf,CAAC;EAEL,CAAC;EAED,oBAAOlB,OAAA,CAACJ,QAAQ;IAACY,IAAI,EAAEA;EAAK;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACjC;AAACpB,EAAA,CA3CeX,KAAK;AAAAgC,EAAA,GAALhC,KAAK;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}